{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/enemy_stats.js","webpack:///./src/enemy_stats_view.js","webpack:///./src/game_view.js","webpack:///./src/index.js","webpack:///./src/instructions.js","webpack:///./src/instructions_view.js","webpack:///./src/road.js","webpack:///./src/score.js","webpack:///./src/score_view.js","webpack:///./src/stats.js","webpack:///./src/stats_view.js","webpack:///./src/tower.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,UAAU;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,4CAA4C,UAAU;AACtD;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6CAA6C,mCAAmC;AAChF;AACA;AACA;;AAEA,4B;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+B;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0B;;;;;;;;;;;ACvBA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,iBAAiB,mBAAO,CAAC,uCAAa;AACtC,cAAc,mBAAO,CAAC,+BAAS;AAC/B,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,mBAAmB,mBAAO,CAAC,2CAAe;AAC1C,uBAAuB,mBAAO,CAAC,qDAAoB;AACnD,cAAc,mBAAO,CAAC,+BAAS;AAC/B,kBAAkB,mBAAO,CAAC,yCAAc;AACxC,cAAc,mBAAO,CAAC,+BAAS;AAC/B,kBAAkB,mBAAO,CAAC,yCAAc;AACxC,qBAAqB,mBAAO,CAAC,6CAAgB;AAC7C,yBAAyB,mBAAO,CAAC,uDAAqB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,uC;AACA;AACA;AACA;AACA,mC;AACA;AACA;AACA;AACA,Y;AACA,Q;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,S;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC,C;;;;;;;;;;;ACtHD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sB;;;;;;;;;;;ACdA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,MAAM;AAClD,4CAA4C,MAAM;AAClD,4CAA4C,MAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,4CAA4C,MAAM;AAClD,4CAA4C,MAAM;AAClD,4CAA4C,MAAM;AAClD;AACA;AACA,yCAAyC,MAAM;AAC/C,aAAa;AACb,yCAAyC,MAAM;AAC/C,aAAa;AACb,yCAAyC,MAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uB;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2B;;;;;;;;;;;ACjBA,cAAc,mBAAO,CAAC,+BAAS;;;AAG/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD,4CAA4C,aAAa;AACzD,6CAA6C,WAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,S;AACA;AACA;;AAEA,uB;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2B;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sB","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","class EnemyStats {\n    constructor(context) {\n        this.context = context  \n    }\n\n    draw() {\n        if (round === 0){\n        //     let a = Date.now()\n        //     let countdown = Math.floor((startTime - a) / 1000)\n        //     let statusBar = Math.floor(countdown % 35)\n            // debugger\n            // if(countdown >= 0){\n            //     this.context.clearRect(0, 0, 300, 300)\n            //     this.context.font = \"20px Arial\";\n            //     this.context.fillText(`Round starts in:`, 10, 80)\n            //     this.context.fillText(`${countdown} seconds`, 10, 110)\n                // this.context.beginPath();\n                // this.context.arc(\n                //     60,\n                //     60,\n                //     30,\n                //     0,\n                //     (2 * Math.PI) * (1 + (-1 * (countdown / 35))),\n                //     true\n                // );\n                // this.context.stroke()\n                // (2 * Math.PI) * (1 + (-1 * (this.hp / totalHp)))\n            // } else if (countdown === 1) {\n                // this.context.clearRect(0, 0, 300, 300)\n                // this.context.font = \"20px Arial\";\n                // this.context.fillText(`Round starts in:`, 10, 80)\n                // this.context.fillText(`${countdown} second`, 10, 110)\n                // this.context.fillRect(50, 50, 50, 50)\n            // } else if (countdown < 1){\n                // this.context.clearRect(0, 0, 300, 300)\n                // this.context.font = \"20px Arial\";\n                // this.context.fillText(`Round starts`, 10, 80)\n                // this.context.fillText(`NOW!`, 10, 110)\n                // this.context.fillRect(50, 50, 50, 50)\n        //     }\n        null\n        } else {\n            this.context.clearRect(0, 0, 300, 300)\n            this.context.font = \"20px Arial\";\n            this.context.fillText(`Enemy`, 10, 80)\n            this.context.fillText(`Health: ${(10 * (1 + (0.25 * (round - 1))) )}`, 10, 110)\n        }\n    }\n}\n\nmodule.exports = EnemyStats;","class EnemyStatsView {\n    constructor(enemyStats, context) {\n        this.context = context;\n        this.enemyStats = enemyStats;\n        this.grid = grid\n    }\n\n    animate(time) {\n        const timeDelta = time - this.lastTime;\n        this.enemyStats.draw(this.grid, this.context);\n        this.lastTime = time;\n        requestAnimationFrame(this.animate.bind(this));\n    };\n\n    start() {\n        this.lastTime = 0;\n        requestAnimationFrame(this.animate.bind(this));\n    };\n}\nmodule.exports = EnemyStatsView","class GameView {\n    constructor(game, context){\n        this.context = context;\n        this.game = game;\n        this.grid = grid\n    }\n\n    animate(time) {\n        const timeDelta = time - this.lastTime;\n        this.game.draw(this.grid, this.context);\n        this.lastTime = time;\n\n        requestAnimationFrame(this.animate.bind(this));\n    };\n\n    start() {\n        if( lives > 0 && this.game.enemies.length === 0) {\n            this.game.play()\n        }\n        this.lastTime = 0;\n        requestAnimationFrame(this.animate.bind(this));\n    };\n}\nmodule.exports = GameView;","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\nconst Tower = require(\"./tower\")\nconst Road = require(\"./road\")\nconst EnemyStats = require(\"./enemy_stats\")\nconst EnemyStatsView = require(\"./enemy_stats_view\")\nconst Score = require(\"./score\")\nconst ScoreView = require(\"./score_view\")\nconst Stats = require(\"./stats\")\nconst StatsView = require(\"./stats_view\")\nconst Instructions = require(\"./instructions\")\nconst InstructionsView = require(\"./instructions_view\")\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const canvas = document.getElementById(\"canvas\")\n    const context = canvas.getContext(\"2d\")\n    const game = new Game(context);\n    const getMousePos = (canvas, event) => {\n        let rect = canvas.getBoundingClientRect();\n        return {\n            x: event.clientX - rect.left,\n            y: event.clientY - rect.top\n        }\n    }\n    let object\n    const handleClick = (event) => {\n        let pos = getMousePos(canvas, event)\n        let y = Number.parseInt(pos.x / 20)\n        let x = Number.parseInt(pos.y / 20)\n        if (grid[x][y] === \"o\") {\n            let tower = new Tower(y, x, canvas)\n            grid[x][y] = tower\n            object = grid[x][y]\n            game.add(tower)\n        } else if (grid[x][y] instanceof Tower) {\n            console.log(grid[x][y])\n            object = grid[x][y]\n        }\n    }\n\n    // const handleHover = (event) => {\t\n    //     let pos = getMousePos(canvas, event)\t\n    //     let y = Number.parseInt(pos.x / 20)\t\n    //     let x = Number.parseInt(pos.y / 20)\t\n    //     if (grid[x][y] === \"o\"){\t\n    //         context.fillStyle = \"red\"\t\n    //         context.strokeRect(x * 20, y * 20, 20, 20)\t\n    //         context.fillRect(x * 20, y * 20, 20, 20)\t\n    //     } \t\n    // }\t\n\n\n    // canvas.addEventListener('pointermove', handleHover)\t\n    canvas.addEventListener('click', handleClick)\n    new GameView(game, context).start();\n\n    const score = document.getElementById(\"score\")\n    const scoreContext = score.getContext(\"2d\")\n    const scoreEle = new Score(scoreContext)\n    new ScoreView(scoreEle).start()\n\n    const stats = document.getElementById(\"stats\")\n    const statsContext = stats.getContext(\"2d\")\n    let statsEle = new Stats(statsContext, object)\n    new StatsView(statsEle).start()\n\n    const instructions = document.getElementById(\"instructions\")\n    const instructionsContext = instructions.getContext(\"2d\")\n    const instructionsEle = new Instructions(instructionsContext)\n    new InstructionsView(instructionsEle).start()\n\n    const enemyStats = document.getElementById(\"enemy\")\n    const enemyStatsContext = enemyStats.getContext(\"2d\")\n    const enemyEle = new EnemyStats(enemyStatsContext)\n    new EnemyStatsView(enemyEle).start()\n\n    const statsClick = (event) => {\n        let pos = getMousePos(canvas, event)\n        let x = pos.x\n        let y = pos.y\n        let gy = Number.parseInt(pos.x / 20)\n        let gx = Number.parseInt(pos.y / 20)\n        if (grid[gx][gy] instanceof Tower) {\n            statsEle.draw(grid[gx][gy])\n        } \n    }\n    isUpgrade = (pos) => {\n        return pos.x > 10 && pos.x < 95 && pos.y < 45 && pos.y > 23\n    }\n\n    isSell = (pos) => {\n        return pos.x > 100 && pos.x < 140 && pos.y < 45 && pos.y > 23\n    }\n\n    const upgrade = (event) => {\n        let pos = getMousePos(stats, event)\n        if(isUpgrade(pos)){\n            newObject = object.upgrade()\n            object = newObject\n            statsEle = new Stats(statsContext, object)\n            new StatsView(statsEle).start()\n        }\n    }\n\n    const sell = (event) => {\n        let pos = getMousePos(stats, event)\n        if(isSell(pos) && object instanceof Tower) {\n            let row = object.col * 1\n            let col = object.row * 1\n            game.remove(grid[object.col][object.row])\n            grid[row][col] = \"o\"\n            object = null\n        }\n    }\n\n    canvas.addEventListener('click', statsClick)\n    stats.addEventListener('click', upgrade)\n    stats.addEventListener('click', sell)\n})","class Instructions {\n    constructor(context) {\n        this.context = context\n    }\n\n    draw() {\n        this.context.clearRect(0, 0, 900, 200)\n        this.context.font = \"20px Arial\";\n        this.context.fillText(`Welcome to JavaScript Tower Defense`, 20, 30);\n        this.context.fillText(`Left click on a green tile to create a tower to defend the path`, 20, 60)\n    }\n}\n\nmodule.exports = Instructions;","class InstructionsView {\n    constructor(instructions, context) {\n        this.context = context;\n        this.instructions = instructions;\n    }\n\n    animate(time) {\n        this.instructions.draw();\n        this.lastTime = time;\n        requestAnimationFrame(this.animate.bind(this));\n    };\n\n    start() {\n        this.lastTime = 0;\n        requestAnimationFrame(this.animate.bind(this));\n    };\n}\nmodule.exports = InstructionsView;","class Road{\n    constructor(x, y, canvas){\n        this.x = x;\n        this.y = y;\n        this.canvas = canvas;\n        this.context = this.canvas.getContext(\"2d\")\n        this.fillColor();\n    }\n    fillColor() {\n        this.context.fillStyle = \"tan\"\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n}\n module.exports = Road","class Score {\n    constructor(context) {\n        this.context = context\n    }\n\n    draw() {\n        let a = Date.now()\n        let countdown = Math.floor((startTime - a) / 100)\n        let statusBar = Math.floor(countdown % 35)\n        if (round === 0){\n            this.context.clearRect(0, 0, 300 , 100);\n            this.context.font = \"15px Arial\";\n            this.context.fillText(`Score: ${score}`, 120, 20);\n            this.context.fillText(`Lives: ${lives}`, 120, 50);\n            this.context.fillText(`Money: ${money}`, 120, 80);\n            this.context.fillText(`Prepare!`, 20, 50);\n            this.context.beginPath();\n            this.context.arc(\n                50,\n                50,\n                40,\n                0,\n                (2 * Math.PI) * (1 + (-1 * (countdown / 350))),\n                true\n            );\n            this.context.lineWidth = 10\n            this.context.strokeStyle = \"green\"\n            this.context.stroke()\n        } else {\n            this.context.clearRect(0, 0, 300 , 100);\n            this.context.font = \"15px Arial\";\n            this.context.fillText(`Score: ${score}`, 120, 20);\n            this.context.fillText(`Lives: ${lives}`, 120, 50);\n            this.context.fillText(`Money: ${money}`, 120, 80);\n            this.context.fillText(`Wave`, 30, 50);\n            if (round < 10){\n                this.context.fillText(`${round}`, 45, 70)\n            } else if (round >= 10 && round < 100) {\n                this.context.fillText(`${round}`, 41, 70)\n            } else {\n                this.context.fillText(`${round}`, 37, 70)\n            }\n            this.context.beginPath();\n            this.context.arc(\n                50,\n                50,\n                40,\n                0,\n                (2 * Math.PI) * (1 + (-1 * (countdown / 350))),\n                true\n            );\n            this.context.lineWidth = 10\n            this.context.strokeStyle = [\"black\", \"brown\", \"purple\", \"yellow\", \"orange\"][(round - 1) % 5]\n            this.context.stroke()\n        }\n    }\n}\n\nmodule.exports = Score;","class ScoreView {\n    constructor(score, context) {\n        this.context = context;\n        this.score = score;\n    }\n\n    animate(time) {\n        this.score.draw();\n        this.lastTime = time;\n        requestAnimationFrame(this.animate.bind(this));\n    };\n\n    start() {\n        this.lastTime = 0;\n        requestAnimationFrame(this.animate.bind(this));\n    };\n}\nmodule.exports = ScoreView;","const Tower = require(\"./tower\")\n\n\nclass Stats {\n    constructor(context, object = null) {\n        this.context = context\n        this.object = object\n    }\n\n    draw(object) {\n        if (object instanceof Tower) {\n            this.context.clearRect(0, 0, 300, 300)\n            this.context.font = \"20px Arial\";\n            this.context.fillStyle = \"black\"\n            this.context.fillText(`${object.stage} Tower`, 10, 80)\n            this.context.fillText(`Range: ${object.range}`, 10, 110)\n            this.context.fillText(`Damage: ${object.dmg}`, 10, 140)\n            if ([\"Pawn\", \"Knight\", \"Bishop\", \"Rook\", \"Queen\"].includes(object.stage)){\n                this.context.fillStyle = \"blue\"\n                this.context.fillText(`Upgrade`, 14, 40)\n                this.context.strokeStyle = \"blue\"\n                this.context.strokeRect(10, 23, 85, 22);\n                this.context.fillStyle = \"red\"\n                this.context.fillText(`Sell`, 104, 40)\n                this.context.strokeStyle = \"red\"\n                this.context.strokeRect(100, 23, 40, 22);\n            }\n        } \n    }\n}\n\nmodule.exports = Stats;","class StatsView {\n    constructor(stats, context) {\n        this.context = context;\n        this.stats = stats;\n    }\n\n    animate(time) {\n        this.stats.draw();\n        this.lastTime = time;\n        requestAnimationFrame(this.animate.bind(this));\n    };\n\n    start() {\n        this.lastTime = 0;\n        requestAnimationFrame(this.animate.bind(this));\n    };\n}\nmodule.exports = StatsView;","class Tower {\n    constructor(row, col, canvas) {\n        this.row = row;\n        this.col = col;\n        this.range = 4 * tileSize\n        this.dmg = .02\n        this.firingRate = 50\n        this.canvas = canvas\n        this.context = this.canvas.getContext(\"2d\")\n        this.stage = \"Pawn\"\n        this.cost = 5\n        this.upgradeCost = 30\n    }\n\n    draw(context) {\n        context.fillStyle = \"black\"\n        switch (this.stage) {\n            case \"Pawn\":\n                context.font = \"14px Arial\"\n                context.fillText(\"♟\", this.row * tileSize, (this.col * tileSize) + tileSize - 4)\n                break\n            case \"Knight\":\n                context.font = \"14px Arial\"\n                context.fillText(\"♞\", this.row * tileSize, (this.col * tileSize) + tileSize - 4)\n                break\n            case \"Bishop\":\n                context.font = \"14px Arial\"\n                context.fillText(\"♝\", this.row * tileSize, (this.col * tileSize) + tileSize - 4)\n                break\n            case \"Rook\":\n                context.font = \"14px Arial\"\n                context.fillText(\"♜\", this.row * tileSize, (this.col * tileSize) + tileSize - 4)\n                break\n            case \"Queen\":\n                context.font = \"14px Arial\"\n                context.fillText(\"♛\", this.row * tileSize, (this.col * tileSize) + tileSize - 4)\n                break\n            case \"King\":\n                context.font = \"14px Arial\"\n                context.fillText(\"♔\", this.row * tileSize, (this.col * tileSize) + tileSize - 4)\n                break\n        }\n    }\n\n    upgrade(){\n        if (this.upgradeCost < money) {\n            if (this.stage === \"Pawn\"){\n                this.stage = \"Knight\"\n                this.dmg = 5\n                this.upgradeCost = 30\n            } else if (this.stage === \"Knight\"){\n                this.stage = \"Bishop\"\n                this.dmg = 10\n                this.upgradeCost = 100\n            } else if (this.stage === \"Bishop\"){\n                this.stage = \"Rook\"\n                this.dmg = 20\n                this.upgradeCost = 250\n            } else if (this.stage === \"Rook\"){\n                this.stage = \"Queen\"\n                this.dmg = 50\n                this.upgradeCost = 5000\n            } else if (this.stage === \"Queen\"){\n                this.stage = \"King\"\n                this.dmg = 200\n                this.upgradeCost = 15000\n            }\n            money -= this.upgradeCost\n        }\n        return this\n    }\n\n    inRange(enemy) {\n        const a = enemy.x - ((this.row * 20) + 10) \n        const b = enemy.y - ((this.col * 20) + 10) \n        const dist = Math.sqrt(Math.pow(a , 2) + Math.pow(b, 2))\n        if (dist < this.range) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    fireProjectile(enemy) {\n        if (this.inRange(enemy) === true) {\n\t\t\tthis.context.lineWidth = 1\n\t\t\tthis.context.strokeStyle = \"black\"\n\t\t\tthis.context.beginPath()\n\t\t\tthis.context.moveTo(((this.row * 20) + 10), ((this.col * 20) + 10))\n\t\t\tthis.context.lineTo(enemy.x, enemy.y)\n            this.context.stroke();\n            \n            enemy.hp -= this.dmg\n\n            if (enemy.hp <= 0) {\n                enemy.remove()\n                score++\n            }\n        }\n    }\n}\n\nmodule.exports = Tower"],"sourceRoot":""}